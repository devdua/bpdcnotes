{
  "name": "express-password-reset",
  "version": "0.0.4",
  "description": "User Password Reset for your Express Applications",
  "keywords": [
    "Express",
    "Password",
    "Authentication",
    "User"
  ],
  "author": {
    "name": "RGBboy",
    "email": "me@rgbboy.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/RGBboy/express-password-reset"
  },
  "main": "index",
  "engines": {
    "node": "0.8.x"
  },
  "dependencies": {
    "routable": "git://github.com/RGBboy/routable.git",
    "urlsafe-base64": "0.0.x"
  },
  "devDependencies": {
    "express": "3.0.x",
    "jade": "0.27.x",
    "mongoose": "3.5.x",
    "express-named-routes": "0.0.x",
    "attach": "0.0.x",
    "storekeeper": "0.0.x",
    "siphon": "0.0.x",
    "express-flash": "git://github.com/RGBboy/express-flash.git",
    "express-signin": "0.0.x",
    "express-mailer": "0.2.x",
    "express-authenticate": "0.0.x",
    "basic-user-schema": "git://github.com/RGBboy/basic-user-schema.git",
    "test-mailbox": "0.0.x",
    "mocha": "1.5.x",
    "superagent": "0.9.x",
    "should": "1.2.x"
  },
  "scripts": {
    "test": "make test",
    "unit": "make unit",
    "spec": "make spec"
  },
  "readme": "# Express Password Reset\n\nUser Password Reset for your Express Applications\n\n[![Build Status](https://secure.travis-ci.org/RGBboy/express-password-reset.png)](http://travis-ci.org/RGBboy/express-password-reset)\n\n## Installation\n\nWorks with Express 3.0.x\n\n    npm install express-password-reset\n\n## Usage\n\nRequire it:\n\n``` javascript\n  var Signin = require('express-signin'),\n      PasswordReset = require('express-password-reset'),\n      express = require('express'),\n      mongoose = require('mongoose'),\n      app = express(),\n      namedRoutes = require('express-named-routes'),\n      attach = require('attach'),\n      mailer = require('express-mailer'),\n      shared = {\n        model: function () {\n          return mongoose.model.apply(mongoose, arguments);\n        }\n      },\n      signin = Signin(shared),\n      passwordReset = PasswordReset(shared);\n\n  namedRoutes.extend(app);\n  attach.extend(app);\n\n  mailer.extend(app);\n\n  // Views\n  self.set('views', __dirname + '/views');\n  self.set('view engine', 'jade');\n  self.set('view options', { layout: false });\n\n  // Middleware\n  self.use(express.bodyParser());\n  self.use(express.cookieParser('my little secret'));\n  self.use(express.session({ cookie: { maxAge: 60000 }}));\n  self.use(flash());\n\n  // Signin Component\n  app.defineRoute('signin', '/some/url/to/signin/base');\n  app.attach('signin', signin);\n\n  // Reset Password Component\n  app.defineRoute('password-reset', '/some/url/to/password-reset/base');\n  app.attach('password-reset', passwordReset);\n\n```\n\n## Requires\n\n### Extensions\n\nThe following extensions should be used by the application in order to\nuse the Password Reset Component:\n\n* express-mailer\n\n### Components\n\nThe following components should be attached to the application in order to\nuse the Password Reset Component:\n\n* express-signin\n\n### Middleware\n\nThe following middleware should be used by the application before the \nPassword Reset Component:\n\n* express.bodyParser\n* express.cookieParser\n* express.session\n* express-flash\n\n### Views\n\nThe following views should be made available in your view directory:\n\n* ./password-reset/index\n* ./password-reset/edit\n* ./email/password-reset\n\n### Other\n\nExpress Password Reset requires a User Model to be accessible via the \nshared.model('User') in upon construction. The User Model needs to \nimplement the following:\n\n#### User.findByEmail(email, function (err, user) {})\n\nThe `.findByEmail` method takes an email string as an argument and a \ncallback. The callback should respond with an error or the user.\n\n#### User.findByResetToken(resetToken, function (err, user) {})\n\nThe `.findByResetToken` method takes an token string as an argument and a \ncallback. The callback should respond with an error or the user.\n\n#### userInstance.generateResetToken(function (err, user) {})\n\nThe `.generateResetToken` method takes a callback. This method should update \nthe resetToken variable on the user. The callback should respond with an error \nor the user.\n\n## Setting Up Development\n\nIn order to develop and run tests with the supplied example you will \nneed to set up MongoDB with two databases:\n\n* express-password-reset-test\n* express-password-reset-dev\n\nThe usernames and passwords for each are the same as their database names.\n\n## Todo\n\n* Change so the view shows nice errors to the user.\n* Add restrictions to routes!\n* Add unit tests for nice errors in .create route;\n* Add unit tests for nice errors in .edit route;\n* Pass in the action URL to each form via req.routeToPath();\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2013 RGBboy &lt;me@rgbboy.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/RGBboy/express-password-reset/issues"
  },
  "homepage": "https://github.com/RGBboy/express-password-reset",
  "_id": "express-password-reset@0.0.4",
  "dist": {
    "shasum": "7f1b466bf1baf700637b9cdd24d8c5cea459b289"
  },
  "_from": "express-password-reset@*",
  "_resolved": "https://registry.npmjs.org/express-password-reset/-/express-password-reset-0.0.4.tgz"
}
